not True == False

2**10 == 2의 10제곱
50//3 == 50을 3으로 나누었을때의 몫

----숫자 함수----
abs() : 절댓값
pow(n,b) : n의 b제곱
max(a,b,c) : 최댓값
min() : 
round() : 반올림
roudn(a,n) : n의 자리까지 표현 ( 소수 )

----라이브러리 활용----
from math import *
floor() : 내림
ceil() : 올림
sqrt() : 제곱근

from random import *
random() : 난수 (0.0 이상 1.0 이하)
randrange(a,b) : a~b(미만) 난수
randint(a,b) : a~b(이하) 난수

----타입 캐스팅----
int()

sentence = """
this is string type
with numerous string

----슬라이싱----
personal[0:7] #0~6 까지임
personal[0:] #끝까지
personal[-3:] #맨 뒤 기준으로 시작 1234면 2부터 4까지

----문자열 처리 함수----
python = "Python"
python.lower() : 소문자
python.upper() : 대문자
python[].isupper()
len(python) : 길이
python.replace("Py", "pY") : 교체

index = python.index("y") : 위치 확인, 못찾으면 에러
index = python.index("y",startpoint + 1) : 특정 지점 후의 위치 확인

python.find("Py") : 위치 확인, 못찾으면 -1 반환
python.count("y") : 몇 번 나오는지 카운팅

----문자열포멧----
print("나는 %d살 입니다." %20)
print("나는 {}살입니다." .format(20))

%s
%c 'a'/"A"
print("favorite color is %s, %s" %("blue", "beige"))

print("나는 {}{}살입니다." .format(2,0))
print("나는 {0}{1}살입니다." .format(2,0))

print("나는 {age_1}{age_2}살입니다." .format(age_1 = 2, age_2 = 0))

#실제 변수에 사용된 값사용하는 방법
age_1 = 2
age_2 = 0
print(f"나는 {age_1}{age_2}살입니다.")

----탈출문자----
print("저는 'qkd1101'입니다.")
print('저는 "qkd1101"입니다.')
print("저는 \"qkd1101\"입니다.")

print("converse 70 \rchuck") #커서 앞으로 이동 출력 값 : chuck 
\b : 벡스페이스 한글자 삭제
\t : 탭


----리스트----
subway = [10,20,30]

subway.index() : find 위치
subway.append() : 마지막 인덱스 뒤에 요소 추가
subway.insert(i,a) : a 를 i 인덱스에 요소 추가
subway.pop() : queue pop 마지막 인덱스 제거
subway.count : cnt

subway.sort() : 오름 차순 정렬
subway.reverse() : 내림 차순 정렬

subway.clear() : 내용 모두 삭제

subway[-1] : 마지막 요소

#다양한 자료형 사용 가능
mix_list = ["강길동", 30 , True]

#리스트 합치기
subway.extend(mix_list) : subway 리스트에 mix_list 합침

#2중리스트
a = [[0 for col in range(14)] for row in range(14)]

#한줄로 되어있는 문자들 리스트의 정수형으로 받기
# ex) 1 2 3 4 5 6 7 8 9 10 11
li = list(map(int,input().split()))

----사전----
cabinet = {3:"A", 100:"A2", "A-3" : "A3"}
print(cabinet[3]) : 특정 인덱스 순서쌍
print(cabinet.get(3)) : 벨류

print(cabinet[5]) : 에러 발생 + 종료
print(cabinet.get(5)) : "none" 반환, 종료 X
print(cabinet.get(5,"Stirng A")) : "String A" 반환, 종료 X
print(3 in cabinet) : boolean, 있는지 없는지

cabinet["A-3"] = "3" : 변경
cabinet["A-4"] = "A4" : 추가

del cabinet["A-4"] : 삭제

print(cabinet.keys()) : 키 들만 출력
print(cabinet.values()) : 벨류 들만 출력
print(cabinet.items()) : 키, 벨류 쌍들 출력

cabinet.clear() : 삭제

----튜플----
#속도가 빠르나 변경 불가.
menu = ("돈까스", "생선구이")

(name, age, hobby) = ("강길동", 19, "코딩") #한꺼번에 선언이 가능함.

----집합----
#중복 X, 순서 보장 X
my_set = {1,2,3,3,3}
print(my_set) #1,2,3

java = {"A","B","C"}
python = set(["A","D"])

print(java.union(python)) #합집합
print(java.difference(python)) #차집합
print(java.intersection(python)) #교집합

python.add("E") : 추가
java.remove("A") : 삭제
 
----자료구조의 변경----
menu={"커피","우유"}
menu = list(menu) #list type으로 casting
menu = tuple(menu)
menu = set(menu) #set type으로 casting

----if----
if a == 1:
elif a == 2:
else :

----반복문----
for i in range(5) :  #range(n): #0~n
    print("{0}" ,format(i))

customer = {"A", "B", "C" }

for cus in customer:
    print("{0}" .format(cus)) #역순 출력됨.

students = range(0,100)
students = [i+100 for i in students]

students = ["AV", "BC", "HA"]
students = [lent(i) for i in studnets]

customer = "A"
index = 5;

for house in house :
    house.show_detail()

while index >= 1:
    print("{0}" index)
    
----입력----
input("input file name: ")

default : str type으로 입력된다.

temp = int(input("input your age"))

a, b = input('문자열 두 개를 입력하세요: ').split()    # 입력받은 값을 공백을 기준으로 분리
a, b = map(int, input('숫자 두 개를 입력하세요: ').split())
a, b = map(int, input('숫자 두 개를 입력하세요: ').split(',')) # 입력받은 값을 콤마를 기준으로 분리
 
----조건----
a == 1 and b == 7

----함수 선언----
def funct() :
def add(a,b) :
    return a+b
def sub(a,b) :
    return a-b,b #튜플 형식으로 반환

x,y = sub(a,b)

----기본 인자----
print("1234556" \
        .format("123"))

#중복, 비효율 제거.
def profile(name, age=17, main_lang ="java") :

profile("A")

----키워드값----
def profile(name,age,main_lang)

profile(name = "A", main_lang="파이썬", age ="17")

----가변인자----
def profile(name,age,*lang)

for lan in lan :

profile("A", 17, "Python", "Java", "Swift")

----지역, 전역변수----
#전역변수
gun = 10

#함수내에선 지역변수
def checkpoint(n)
    gun = gun - n

    
#함수내에선 전역변수1
def checkpoint(n)
    global gun 
    gun = gun - n

#함수내에선 전역변수2
def checkpoint(gun,n)
    gun = gun - n

----출력----
print("A", "B", sep = " vs ", end = " : ")
print("C") #end가 '?'이므로 '\n'의미 삭제

import sys
print("A", file=sys.stdout)
print("B", file=sys.stderr)

for sub,sco in sco.items() :
    print(sub.ljust(8), str(sco).rjust(7))
    #left/right 왼쪽으로 정렬(8칸 확보후)후 출력

#0으로 채운후 출력
print(str(n).zfill(3))

----출력포맷----
print("{0: >10}".format(500)) : 10자리 공간 확보후 오른쪽으로 정렬하고 출력

print("{0: >+10}".format(500)) : 양수일땐 +도, 음수일땐 -도 출력

print("{0:_<+10}".format(500)) : 10자리 공간 확보후 왼쪽으로 정렬하고 출력

print("{0:, }".format(500)) : 3자리마다 , 적어서 숫자 자리 확인

print("{0:+,}".format(500)) : 음/양 , 3자리마다 , 적어서 숫자 자리 확인

print("{0:^<+30,}".format(10000000000000000000)) : 왼쪽정렬, 음/양 표시 3자리마다 , 적기, 비어있는곳 ^으로 출력

print("{0:f}".format(5/3)) : 소수점 출력, 7번째 자리 반올림

print("{0:.2f}".format(5/3)) : 소수점 특정 자리 수 출력, 3째자리 반올림

----파일입출력----
#파일 새로 만들고 저장
socre_file = open("file.txt","w",encoding="utf=8")
print("math : 100 ",file=socre_file)
print("english : 100",file=socre_file)
socre_file.close()

#이미 있는 파일에 덮어쓰기
socre_file = open("file.txt","a",encoding="utf-8")
socre_file.wirte("psy = 100") #줄바꿈 X
socre_file.close()

#이미 있는 파일 읽기 1
socre_file = open("file.txt","r",encoding="utf-8")
print(socre_file.read()) #모든 내용
socre_file.close()

#이미 있는 파일 읽기 2
socre_file = open("file.txt","r",encoding="utf-8")
print(socre_file.readline()) #한줄 씩 읽기, 커서는 다음 줄로 이동
socre_file.close()

#몇 줄인지 모를때 1
score_file = open("file.txt","r",encoding="utf-8")
while True :
    line = score_file.readline()
    if not line:
        break
    print(line)
socre_file.close()

#몇 줄인지 모를때 2
score_file = open("file.txt","r",encoding="utf-8")
lines = socre_file.readlines()  #list형태로 저장
for line in lines :
    print(line,end="")
socre_file.close()

#폴더 안에 파일 접근
with open("testfolder/testing.txt","w") as test_file :

----pickle----
#데이터 자체를 파일에 저장.
#파일 쓰기
import pickle
profile_file = open("profile.pickle","wb") #피클은 바이너리 파일로만 이용 가능
profile = {"이름" : "A", "나이":30, "취미":["취미1","취미2","취미3"]}
print(profile)
pickle.dump(profile, profile_file)
profile_file.close()

#파일 읽기
import pickle
profile_file = open("profile.pickle","rb")
profile = pickle.load(profile_file) #파일 불러오기
print(profile)
profile_file.close()

----with----
#pickle 파일 읽기
import pickle
with open("profile.pickle","rb") as profile_file :
    print(pickle.load(profile_file)) #with문 탈출되면서 파일도 클러즈 됨

#파일 쓰기
with open("study.txt","w",encoding="utf8") as study_file :
    study_file.write("Studying everything")

#파일 읽기
with open("study.txt","r",encoding="utf8") as study_file :
    print(study_file.readline()) #한줄씩 읽기

#예제
import pickle

for i in range(1,51) :
    with open("report/{0}주차 보고서.txt".format(i),"w",encoding="utf8") as report_file :
        report_file.write("- {0} 주차 보고서 -\n".format(i))
        report_file.write("부서 : 연구&개발 1팀\n")
        report_file.write("이름 : 정주영\n")
        report_file.write("업무 내용 : 개발\n")

----클래스----
class Unit :
    def __init__(self,name,hp,damage) : #Python의 생성자
        self.name = name
        self.hp = hp
        self.damage = damage

#클래스의 타입으로 선언되었을 때 객체라고 부르고,
#그 객체가 메모리에 할당되어 실제 사용될 때 인스턴스라고 부른다.
marine = Unit("M1",40,5)

----멤버변수----
class Unit :
    def __init__(self,name,hp,damage) : #Python의 생성자
        self.name = name #멤버변수
        self.hp = hp
        self.damage = damage

wraith = Unit("레이스1",80,5)
print("이름 : {0}, 공격력 : {1}".format(wraith.name,wraith))

#추가로 외부의 변수를 만들 수 있음, 확장한 변수, 확장된 객체에만 적용 가능함.(wraith2만 )
wraith2.clocking = True

----메소드----
class Unit :
    def __init__(self,name,hp,damage) : #Python의 생성자
        self.name = name #멤버변수
        self.hp = hp
        self.damage = damage

Class AttackUnit :
    def __init__(self,name,hp,damage) : #Python의 생성자
            self.name = name #멤버변수
            self.hp = hp
            self.damage = damage

    def attack(self,location) : 
        print("{0} : {1} "\
            .format(self.name, location))

    def damaged(self,damage) :
        print("{0} : {1}"\
            .format(self.name,damage))
        self.hp -= damage
        if(self.hp <= 0)
            print("{0} : 파괴되었습니다.")

----상속----
class Unit : #부모 클래스
    def __init__(self,name,hp) : #Python의 생성자
        self.name = name #멤버변수
        self.hp = hp
        self.damage = damage
 
Class AttackUnit(Unit): #자식 클래스
    def __init__(self,name,hp,damage) : #Python의 생성자
            Unit.__init(self,name,hp) #상속받은 클래스
            self.damage = damage

----다중상속----
class Unit :
    def __init__(self,name,hp) : #Python의 생성자
        self.name = name #멤버변수
        self.hp = hp
 
class AttackUnit(Unit):
    def __init__(self,name,hp,damage) : #Python의 생성자
            Unit.__init__(self,name,hp) #상속받은 클래스
            self.damage = damage

class Flyable :
    def __init__(self,flying_speed) :
        self.flying_speed = flying_speed

    def fly(self,name,location) :
        print("{0} : {1}".format(name,location)) #self 안 썻음

class FlyableAttackUnit(AttackUnit, Flyable):
    def __init__(self,name,hp,damage,flying_speed) :
        AttackUnit.__init__(self,name,hp,damage)
        Flyable.__init__(self,flying_speed)

valkyrie = FlyableAttackUnit("valkyrie",200,6,5)
valkyrie.fly(Valkyrie.name,10)

----메소드 오버라이딩----
#메소드 재정의
class Unit :
    def __init__(self,name,hp,speed) : #Python의 생성자
        self.name = name #멤버변수
        self.hp = hp
        self.speed = speed

    def move(self, location) : 
        print("{0} : {1}으로 지상 유닛 이동".format(self.name, location, self.speed))

class AttackUnit(Unit):
    def __init__(self,name,hp,speed,damage) : #Python의 생성자
            Unit.__init__(self,name,hp,speed) #상속받은 클래스
            self.damage = damage

class Flyable :
    def __init__(self,flying_speed) :
        self.flying_speed = flying_speed

    def fly(self,name,location) :
        print("{0} : {1}".format(name,location)) #self 안 썻음

class FlyableAttackUnit(AttackUnit, Flyable):
    def __init__(self,name,hp,damage,flying_speed) :
        AttackUnit.__init__(self,name,hp,0,damage)
        Flyable.__init__(self,flying_speed)

    def move(self,location) :
        self.fly(self.name, location)

battlcruiser.move("9시")


----pass----
class BuildeingUnit(Unit):
    def __init__(self,name,hp,location):
        pass    #일단 넘어간다

supply_depot = BuildingUnit("서플라이 디팟", 500, "7시")

----슈퍼----
class BuildeingUnit(Unit):
    def __init__(self,name,hp,location):
        super.__init__(name,hp,0)   #Unit.__init__(self,name,hp,0), 다중 상속일 경우에는 첫 번째 부모만 해당

----프로퍼티----
class Person:
    def __init__(self):
        self.__age = 0
 
    @property
    def age(self):           # getter
        return self.__age
 
    @age.setter
    def age(self, value):    # setter
        self.__age = value
 
james = Person()
james.age = 20      # 인스턴스.속성 형식으로 접근하여 값 저장
print(james.age)    # 인스턴스.속성 형식으로 값을 가져옴

----정적메소드----
class hello:
    num = 10

    @classmethod
    def calc(cls, x):
        return x + 10

print(hello.calc(10))

#인스턴스를 만들지 않아도 메소드 사용이 가능함